// script.js
// ==================== –ö–õ–ê–°–° –î–õ–Ø –ü–ê–î–ê–Æ–©–ò–• –ó–£–ë–û–í ====================
class FallingTooth {
  constructor(x, y) {
    this.element = document.createElement('div');
    this.element.className = 'falling-tooth';
    this.element.textContent = 'ü¶∑';
    this.element.style.left = x + 'px';
    this.element.style.top = y + 'px';
    document.body.appendChild(this.element);
    // –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    this.x = x;
    this.y = y;
    this.vx = (Math.random() - 0.5) * 15; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    this.vy = Math.random() * -10 - 5; // –ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–≤–≤–µ—Ä—Ö)
    this.rotation = Math.random() * 360;
    this.rotationSpeed = (Math.random() - 0.5) * 20;
    this.gravity = 0.5;
    this.bounce = 0.7; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç—Å–∫–æ–∫–∞
    this.friction = 0.99;
    this.alive = true;
  }
  update() {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
    this.vy += this.gravity;
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    this.x += this.vx;
    this.y += this.vy;
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
    this.rotation += this.rotationSpeed;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø–æ–ª–æ–º
    const windowHeight = window.innerHeight;
    if (this.y > windowHeight - 40) {
      this.y = windowHeight - 40;
      this.vy *= -this.bounce;
      this.rotationSpeed *= 0.8;
      // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      if (Math.abs(this.vy) < 1) {
        this.vy = 0;
        this.vx *= 0.9;
      }
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∫–∞–º–∏
    const windowWidth = window.innerWidth;
    if (this.x < 0) {
      this.x = 0;
      this.vx *= -this.bounce;
    } else if (this.x > windowWidth - 40) {
      this.x = windowWidth - 40;
      this.vx *= -this.bounce;
    }
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–∏–µ
    this.vx *= this.friction;
    // –û–±–Ω–æ–≤–ª—è–µ–º DOM
    this.element.style.left = this.x + 'px';
    this.element.style.top = this.y + 'px';
    this.element.style.transform = `rotate(${this.rotation}deg)`;
    // –£–¥–∞–ª—è–µ–º –∑—É–± –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    if (Math.abs(this.vx) < 0.1 && Math.abs(this.vy) < 0.1 && this.y >= windowHeight - 41) {
      this.alive = false;
    }
  }
  remove() {
    if (this.element && this.element.parentNode) {
      this.element.style.transition = 'opacity 0.5s';
      this.element.style.opacity = '0';
      setTimeout(() => {
        if (this.element && this.element.parentNode) {
          this.element.parentNode.removeChild(this.element);
        }
      }, 500);
    }
  }
}
// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑—É–±–æ–≤
let teeth = [];
let animationId = null;
// –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
function animateTeeth() {
  teeth = teeth.filter(tooth => {
    if (tooth.alive) {
      tooth.update();
      return true;
    } else {
      tooth.remove();
      return false;
    }
  });
  if (teeth.length > 0) {
    animationId = requestAnimationFrame(animateTeeth);
  } else {
    animationId = null;
  }
}
// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑—É–±–æ–≤
function createTeeth(event) {
  const rect = event.currentTarget.getBoundingClientRect();
  const x = rect.left + rect.width / 2;
  const y = rect.top + rect.height / 2;
  // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑—É–±–æ–≤
  const count = 18 + Math.floor(Math.random() * 10); // –û—Ç 18 –¥–æ 28 –∑—É–±–æ–≤
  for (let i = 0; i < count; i++) {
    const offsetX = (Math.random() - 0.5) * rect.width;
    const offsetY = (Math.random() - 0.5) * rect.height;
    teeth.push(new FallingTooth(x + offsetX, y + offsetY));
  }
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
  if (animationId === null) {
    animateTeeth();
  }
}
// ==================== –û–°–ù–û–í–ù–û–ô –ö–û–î ====================
// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
  // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
  const loader = document.getElementById('loader');
  if (loader) {
    loader.classList.add('hidden');
    setTimeout(() => {
      loader.style.display = 'none';
    }, 500);
  }
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
  initTypingTitles();
  initCounters();
  initGallery();
  initScrollEffects();
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –≤—Å–µ feature-card
  const featureCards = document.querySelectorAll('.feature-card');
  featureCards.forEach(card => {
    if (card.id !== 'open-gallery-card') {
      card.addEventListener('click', createTeeth);
    }
  });
});
// –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∞—é—â–µ–≥–æ—Å—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function initTypingTitles() {
  const typingTitles = document.querySelectorAll('.typing-title');
  const typingObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const title = entry.target;
        const text = title.textContent;
        title.textContent = '';
        const cursor = document.createElement('span');
        cursor.className = 'typing-cursor';
        title.appendChild(cursor);
        let i = 0;
        const typeWriter = () => {
          if (i < text.length) {
            title.insertBefore(document.createTextNode(text[i]), cursor);
            i++;
            setTimeout(typeWriter, 150);
          } else {
            setTimeout(() => {
              cursor.style.animation = 'none';
              setTimeout(() => cursor.remove(), 500);
            }, 2000);
          }
        };
        setTimeout(typeWriter, 300);
        typingObserver.unobserve(title);
      }
    });
  }, {
    threshold: 0.5,
    rootMargin: '0px 0px -50px 0px'
  });
  typingTitles.forEach(title => {
    typingObserver.observe(title);
  });
}
// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
function initCounters() {
  const counters = document.querySelectorAll('.counter');
  const counterObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const counter = entry.target;
        const target = parseInt(counter.getAttribute('data-target'));
        const duration = 2000;
        const increment = target / (duration / 16);
        let current = 0;
        const updateCounter = () => {
          current += increment;
          if (current < target) {
            counter.textContent = Math.floor(current);
            setTimeout(updateCounter, 16);
          } else {
            counter.textContent = target;
          }
        };
        updateCounter();
        counterObserver.unobserve(counter);
      }
    });
  }, {
    threshold: 0.5,
    rootMargin: '0px 0px -50px 0px'
  });
  counters.forEach(counter => {
    counterObserver.observe(counter);
  });
}
// –ì–ê–õ–ï–†–ï–Ø - –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const galleryImages = [
  { src: "photos/1.jpg", alt: "Dental work example 1" },
  { src: "photos/2.jpg", alt: "Dental work example 2" },
  { src: "photos/3.png", alt: "Dental work example 3" },
  { src: "photos/4.jpg", alt: "Dental work example 4" },
  { src: "photos/5.png", alt: "Dental work example 5" },
  { src: "photos/6.png", alt: "Dental work example 6" },
  { src: "photos/7.png", alt: "Dental work example 7" }
];
// –≠–ª–µ–º–µ–Ω—Ç—ã –≥–∞–ª–µ—Ä–µ–∏
const galleryModal = document.getElementById('galleryModal');
const openGalleryCard = document.getElementById('open-gallery-card');
const closeGalleryBtn = document.querySelector('.close-gallery');
const mainImage = document.getElementById('mainImage');
const thumbnailsContainer = document.getElementById('thumbnailsContainer');
let currentImageIndex = 0;
let startX = 0;
let endX = 0;
let isAnimating = false;
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∞–ª–µ—Ä–µ–∏
function initGallery() {
  // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—ã
  galleryImages.forEach((image, index) => {
    const thumbnail = document.createElement('img');
    thumbnail.src = image.src;
    thumbnail.alt = image.alt;
    thumbnail.className = 'thumbnail';
    if (index === 0) thumbnail.classList.add('active');
    thumbnail.addEventListener('click', () => {
      if (!isAnimating) {
        showImage(index);
      }
    });
    thumbnailsContainer.appendChild(thumbnail);
  });
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  if (galleryImages.length > 0) {
    setMainImage(0);
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–≤–∞–π–ø–∞
  initSwipeGestures();
}
// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏)
function setMainImage(index) {
  currentImageIndex = index;
  const image = galleryImages[index];
  mainImage.src = image.src;
  mainImage.alt = image.alt;
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–∏–Ω–∏–∞—Ç—é—Ä—É
  document.querySelectorAll('.thumbnail').forEach((thumb, i) => {
    thumb.classList.toggle('active', i === index);
  });
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  document.querySelector('.gallery-title-modal').textContent =
    `My Work Gallery (${index + 1}/${galleryImages.length})`;
}
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∂–µ—Å—Ç–æ–≤ —Å–≤–∞–π–ø–∞
function initSwipeGestures() {
  const galleryBody = document.querySelector('.gallery-body');
  galleryBody.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX;
  }, { passive: true });
  galleryBody.addEventListener('touchmove', (e) => {
    endX = e.touches[0].clientX;
  }, { passive: true });
  galleryBody.addEventListener('touchend', () => {
    if (isAnimating) return;
    const diffX = startX - endX;
    const minSwipeDistance = 50; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∞–π–ø–∞
    if (Math.abs(diffX) > minSwipeDistance) {
      if (diffX > 0) {
        // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        nextImage();
      } else {
        // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        prevImage();
      }
    }
  });
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–∫–ª–∏–∫–∏ –ø–æ –∫—Ä–∞—è–º)
  galleryBody.addEventListener('click', (e) => {
    if (isAnimating) return;
    const rect = galleryBody.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const width = rect.width;
    // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤ –ª–µ–≤–æ–π —Ç—Ä–µ—Ç–∏ —ç–∫—Ä–∞–Ω–∞ - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (clickX < width / 3) {
      prevImage();
    }
    // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤ –ø—Ä–∞–≤–æ–π —Ç—Ä–µ—Ç–∏ —ç–∫—Ä–∞–Ω–∞ - —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    else if (clickX > width * 2 / 3) {
      nextImage();
    }
  });
}
// –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
function showImage(index) {
  if (isAnimating || index === currentImageIndex) return;
  isAnimating = true;
  currentImageIndex = index;
  const image = galleryImages[index];
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
  mainImage.classList.add('slide-in');
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  mainImage.src = image.src;
  mainImage.alt = image.alt;
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–∏–Ω–∏–∞—Ç—é—Ä—É
  document.querySelectorAll('.thumbnail').forEach((thumb, i) => {
    thumb.classList.toggle('active', i === index);
  });
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  document.querySelector('.gallery-title-modal').textContent =
    `My Work Gallery (${index + 1}/${galleryImages.length})`;
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  setTimeout(() => {
    mainImage.classList.remove('slide-in');
    isAnimating = false;
  }, 400);
}
// –°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
function nextImage() {
  let nextIndex = currentImageIndex + 1;
  if (nextIndex >= galleryImages.length) {
    nextIndex = 0;
  }
  showImage(nextIndex);
}
// –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
function prevImage() {
  let prevIndex = currentImageIndex - 1;
  if (prevIndex < 0) {
    prevIndex = galleryImages.length - 1;
  }
  showImage(prevIndex);
}
// –û—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é
function openGallery() {
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
  if (!mainImage.src || mainImage.src === '') {
    setMainImage(0);
  }
  galleryModal.classList.add('active');
  document.body.style.overflow = 'hidden';
  // –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  closeGalleryBtn.focus();
}
// –ó–∞–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é
function closeGallery() {
  galleryModal.classList.remove('active');
  document.body.style.overflow = 'auto';
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–∞–ª–µ—Ä–µ–∏
  openGalleryCard.focus();
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
openGalleryCard.addEventListener('click', openGallery);
closeGalleryBtn.addEventListener('click', closeGallery);
// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
galleryModal.addEventListener('click', (e) => {
  if (e.target === galleryModal) {
    closeGallery();
  }
});
// –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('keydown', (e) => {
  if (galleryModal.classList.contains('active') && !isAnimating) {
    switch(e.key) {
      case 'Escape':
        closeGallery();
        break;
      case 'ArrowLeft':
        prevImage();
        break;
      case 'ArrowRight':
        nextImage();
        break;
    }
  }
});
// –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö)
document.addEventListener('click', (e) => {
  if (e.target.closest('.feature-card, .gallery-card, .social-link')) {
    if (navigator.vibrate) navigator.vibrate(10); // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 10–º—Å
  }
});
// –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initScrollEffects() {
  // Simple animation on scroll
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.style.opacity = '1';
        entry.target.style.transform = 'translateY(0)';
        if (entry.target.classList.contains('contacts-blur-box')) {
          entry.target.classList.add('visible');
        }
      }
    });
  }, observerOptions);
  // Add animation to sections
  document.querySelectorAll('section').forEach(section => {
    section.style.opacity = '0';
    section.style.transform = 'translateY(20px)';
    section.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    observer.observe(section);
  });
  // Observer for cases (iframes)
  const caseObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        setTimeout(() => {
          entry.target.classList.add('visible');
        }, 200);
      }
    });
  }, {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  });
  // Observe all cases
  document.querySelectorAll('.case').forEach(caseElement => {
    caseObserver.observe(caseElement);
  });
  // Special observer for contacts blur box
  const contactsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        setTimeout(() => {
          entry.target.classList.add('visible');
        }, 300);
      }
    });
  }, {
    threshold: 0.3,
    rootMargin: '0px 0px -100px 0px'
  });
  // Observe contacts blur box
  const contactsBox = document.querySelector('.contacts-blur-box');
  if (contactsBox) {
    contactsObserver.observe(contactsBox);
  }
  // Observer for video container
  const videoObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        setTimeout(() => {
          entry.target.classList.add('visible');
        }, 400);
      }
    });
  }, {
    threshold: 0.3,
    rootMargin: '0px 0px -50px 0px'
  });
  // Observe all terminal-video-container
  document.querySelectorAll('.terminal-video-container').forEach(container => {
    videoObserver.observe(container);
  });
}
// Smooth scrolling for anchor links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    const target = document.querySelector(this.getAttribute('href'));
    if (target) {
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  });
});